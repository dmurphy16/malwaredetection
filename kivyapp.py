import kivy
import subprocess
import os
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.checkbox import CheckBox
from kivy.core.window import Window
from kivy.uix.gridlayout import GridLayout
from kivy.uix.popup import Popup


class MyGridLayout(GridLayout):
    # Initialize infinite keywords
    def __init__(self, **kwargs):
        # Call grid layout constructor
        super(MyGridLayout, self).__init__(**kwargs)

        self.cols = 1
        self.inside = GridLayout()
        self.inside.cols = 2

        # Window.clearcolor = (126/255, 188/255, 230/255)
        Window.clearcolor = (142/255, 157/255, 204/255)

        # Add widgets
        self.inside.add_widget(Label(
            text="Source Input (file, folder, URL): ", font_size=30, bold=True, color=(0, 0, 0)))
        # Add Input Box
        self.input = TextInput(multiline=True, font_size=30,
                               background_color=(217/255, 219/255, 241/255))
        self.inside.add_widget(self.input)

        self.inside.add_widget(
            Label(text='Directory?', font_size=30, bold=True, color=(0, 0, 0)))
        self.isDirectory = CheckBox(
            active=True, color=(207/255, 216/255, 215/255))
        self.inside.add_widget(self.isDirectory)

        self.inside.add_widget(Label(
            text="Zip Archive Password (if applicable): ", font_size=30, bold=True, color=(0, 0, 0)))
        # Add Input Box
        self.zippass = TextInput(
            multiline=False, font_size=30, background_color=(217/255, 219/255, 241/255))
        self.inside.add_widget(self.zippass)

        self.add_widget(self.inside)

        # Create a Scan Button
        self.scan = Button(
            text="Scan",
            font_size=32,
            background_color=(203/255, 247/255, 237/255),
            size_hint=(0.25, 0.25))
        # Bind the button
        self.scan.bind(on_press=self.press)
        self.add_widget(self.scan)

    def press(self, instance):
        input = self.input.text
        zippass = self.zippass.text
        isDirectory = self.isDirectory.active

        cmd = 'python3 run.py run '
        if isDirectory:
            cmd = cmd + '-d '
        if len(zippass) > 0:
            cmd = cmd + '--password='+zippass + ' '
        cmd = cmd + input

        # Clear the input boxes
        self.input.text = ""
        self.zippass.text = ""

        os.system('python3 run.py build')
        output = os.popen(cmd).read()

        layout = GridLayout(cols=1, padding=10)
        popupLabel = Label(text=output, color=(217/255, 219/255, 241/255))
        closeButton = Button(text="Close", size_hint=(0.25, 0.25))
        layout.add_widget(popupLabel)
        layout.add_widget(closeButton)

        popup = Popup(title='Malware Detection Results', content=layout)
        popup.open()
        closeButton.bind(on_press=popup.dismiss)


class MalwareDetection(App):
    def build(self):
        return MyGridLayout()


if __name__ == '__main__':
    MalwareDetection().run()
