import kivy
import subprocess
import os
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.checkbox import CheckBox

class MyGridLayout(GridLayout):
	# Initialize infinite keywords
	def __init__(self, **kwargs):
		# Call grid layout constructor
		super(MyGridLayout, self).__init__(**kwargs)

		# Set columns
		self.cols = 2

		# Add widgets
		self.add_widget(Label(text="Source Input (file, folder, URL): "))
		# Add Input Box
		self.input = TextInput(multiline=True)
		self.add_widget(self.input)

		self.add_widget(Label(text ='Directory?'))
		self.isDirectory = CheckBox(active=True)
		self.add_widget(self.isDirectory)

		self.add_widget(Label(text="Zip Archive Password (if applicable): "))
		# Add Input Box
		self.zippass = TextInput(multiline=False)
		self.add_widget(self.zippass)

		# Create a Scan Button
		self.scan = Button(text="Scan", font_size=32)
		# Bind the button
		self.scan.bind(on_press=self.press)
		self.add_widget(self.scan)

	def press(self, instance):
		input = self.input.text
		zippass = self.zippass.text
		isDirectory = self.isDirectory.active

		# if len(zippass) > 0 and isDirectory:
		# 	#command for processing directory and zip password
		# 	self.add_widget(Label(text=f'isDirectory is: {isDirectory} and zippass is: {zippass}!'))
		# elif len(zippass) > 0 and not isDirectory:
		# 	#command for processing zip password but not directory
		# 	self.add_widget(Label(text=f'zippass is {zippass}!'))
		# elif len(zippass) == 0 and isDirectory:
		# 	#command for processing directory but not zip password
		# 	self.add_widget(Label(text=f'isDirectory is: {isDirectory}!'))
		# else:
		# 	#command for processing just file (no directory nor zip password)
		# 	self.add_widget(Label(text=f'Process input file: {input}!'))

		os.system('python3 run.py build')
		os.system('python3 run.py run '+ input)
		#subprocess.run(["docker", "run", "-it", "--rm", "--name=scanner", 'malwarescanner', {input}, {zippass}])
		
		# Print it to the screen
		#self.add_widget(Label(text=f'test inputs: source file: - {input} archive pass - {zippass} and {isDirectory}!'))
		
		# Clear the input boxes
		self.input.text = ""
		self.zippass.text = ""

class MalwareDetection(App):
	def build(self):
		return MyGridLayout()


if __name__ == '__main__':
	MalwareDetection().run()
