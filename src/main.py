#!/usr/bin/env python3

import logging
import subprocess
import yara
import argparse
import coloredlogs
import requests
from pathlib import Path
import os

MAL_PATH = "/app/mal"


def handle_input(path, rules):
    """ Checks if the input is a directory, file, or url, and handles it accordingly """
    if "http://" in path or "https://" in path:     # download from interwebs
        r = requests.get(path)
        if r.status_code == 200:
            with open(MAL_PATH, "wb") as f:
                f.write(r.content)
            return scan_file(MAL_PATH, rules)
        else:
            logging.error("Download failed: Error " + str(r.status_code))
    elif "\\" in path or "/" in path:
        return scan_dir(path, rules)
    elif is_archive(path):
        new_path = open_archive(path)
        scan_dir(new_path, rules)
    else:
        scan_file(path, rules)


def is_archive(path: str) -> bool:
    """ Determines if a given filepath is an archive """
    extension = path.split(".")[-1]
    return extension in ["7z", "zip", "rar", "xz"]


def dict_to_str(d: dict) -> str:
    """ Turns a dictionary in to a nice string"""
    out = ""
    for k, v in d.items():
        out += str(k, v)
    return out


def compile_rules(dir_source) -> yara.Rules:
    """ Compiles the Yara rules from a directory """
    pass


def open_archive(path: str, pw=-1) -> str:
    """ Opens an archive and returns the extracted location """
    pass


def scan_dir(directory, rules):
    """ Scans a given directory """
    matches = []
    for (root, dirs, files) in os.walk(directory, topdown=True): # maybe use '.' for dir
        for file in files:
            matches.append(scan_file(file, rules))


def scan_file(path, rules):
    """ Scans a given file """
    logging.info("Scanning " + path)
    matches = rules.match(path)
    return matches


def main():
    coloredlogs.install(level="INFO")

    parser = argparse.ArgumentParser(description="Scans a file or folder for malware")
    parser.add_argument("file", metavar="input", type=str, help="the file to scan")  # todo: take in directories
    parser.add_argument("password")
    # https://stackoverflow.com/questions/62301856/how-do-i-unzip-a-password-protected-zip-file-using-python
    args = parser.parse_args()
    path = args.file

    logging.info("Starting malware scanner")
    rules = yara.compile(filepath="/app/rules/dummy_rule.yar")
    # rules = compile_rules("../rules")
    logging.info("Compiled rules")

    matches = scan_file(path, rules)

    logging.info("Scan complete")

    for i in matches:
        logging.info(i)


if __name__ == "__main__":
    main()
