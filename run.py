import argparse
import subprocess

# Creates and runs a Docker image to analyze malware
MODES = ["build", "run"]
IMAGE_NAME = "malwarescanner"


def main():
    # https://stackoverflow.com/questions/9505898/conditional-command-line-arguments-in-python-using-argparse
    parser = argparse.ArgumentParser(prog="Malware Scanner Runner",
                                     description="Creates and runs a Docker image to analyze malware")

    subparsers = parser.add_subparsers(dest="subcommand")
    subparsers.required = True

    # subparser for args to build the Docker image
    parser_build = subparsers.add_parser("build")

    # subparser for args to run the scanner
    parser_run = subparsers.add_parser("run")
    parser_run.add_argument('filename', type=str, help="The file path or URL for the malware sample")
    parser_run.add_argument('-p', '--password', dest='password', default=" ", required=False,
                            help="Password for password-protected archives")
    parser_run.add_argument('-d', '--directory', dest='directory', help="Specify a folder to analyze all the contents",
                            required=False)
    # other args: password (if the malware is in a zip archive), directory, custom rules, logging and debug levels
    # -i    file or url input
    # -d    directory to scan
    # -p    archive password

    args = parser.parse_args()

    if args.subcommand == "build":
        # result = subprocess.run(["docker", "build", "-t", IMAGE_NAME, "."], capture_output=True, text=True)
        #                             # check=True, stdout=subprocess.PIPE, shell=True)
        # result = subprocess.Popen(["docker", "build", "-t", IMAGE_NAME, "."], stdout=subprocess.PIPE)
        result = subprocess.run(["docker", "build", "-t", IMAGE_NAME, "."])

    elif args.subcommand == "run":
        result = subprocess.run(["docker", "run", "-it", "--rm", "--name=scanner", IMAGE_NAME, args.filename, args.password])
        #                         capture_output=True, text=True)
        # print(result.stdout)
        # print(result.stderr)
        # TODO: live output
        # result = subprocess.Popen(["docker", "run", "-it", "--rm", "--name=scanner", IMAGE_NAME, args.filename],
        #                           stdout=subprocess.PIPE)


if __name__ == "__main__":
    main()
